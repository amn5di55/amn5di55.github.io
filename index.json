[{"categories":[null],"content":"steam美化合集 ","date":"2024-07-02","objectID":"/posts/steam%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/:0:0","tags":[null],"title":"Steam主页美化","uri":"/posts/steam%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/"},{"categories":[null],"content":"精选艺术作品展柜制作 steam网页端艺术作品上传：https://steamcommunity.com/sharedfiles/edititem/767/3/ 艺术作品上传代码: var num= document.getElementsByName(\"image_width\")[0].value; document.getElementsByName(\"image_height\")[0].value = num-(num-1); document.getElementsByName(\"image_width\")[0].value= num*100; 文件格式转换网站：https://convertio.co/zh/ gif裁剪压缩网站：https://ezgif.com/crop 参数 495 256 630 824 得到gif之后pr合成 https://www.bilibili.com/video/BV1Cg411B7ch ","date":"2024-07-02","objectID":"/posts/steam%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/:1:0","tags":[null],"title":"Steam主页美化","uri":"/posts/steam%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/"},{"categories":[null],"content":"隐藏作品名称 在上传作品之后你可能发现了，艺术作品和截图作品展柜在最下方会默认显示作品名，并且当我们尝试将作品名称设置空格也不行。 这是因为 steam 在前端，对于作品名有 trim 处理。什么？你说前端？没错，后端并没有校验，所以我们完全可以在作品上传时，使用下列代码将作品名置空。 v_trim = _ =\u003e { return _; }; $J('#title').val(' \\n' + Array.from(Array(126), _ =\u003e '\\t').join('')); v_trim 是 steam 的 trim 函数，将其 return 值修改就可以使用 \\n 将输入框填满并达到隐藏作品名的效果。 如果你此前就已经设置了作品名也不用删掉图片重新上传，这段代码在「作品编辑」页面一样适用，可以在控制台输入代码后直接保存。 https://blog.yuki.sh/posts/daf9288c81ba/#%E9%9A%90%E8%97%8F%E4%BD%9C%E5%93%81%E5%90%8D%E7%A7%B0 ","date":"2024-07-02","objectID":"/posts/steam%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/:2:0","tags":[null],"title":"Steam主页美化","uri":"/posts/steam%E4%B8%BB%E9%A1%B5%E7%BE%8E%E5%8C%96/"},{"categories":["默认分类"],"content":"拉取指定分支代码解决方案： 以拉取develop分支的代码为例， 要拉取其余分支代码类似操作 1.使用git命令拉取 命令：git clone -b develop XXX 其中develop就是分支的名称 ","date":"2021-09-20","objectID":"/posts/20/:0:0","tags":[],"title":"拉取指定分支代码解决方案","uri":"/posts/20/"},{"categories":[null],"content":"JS 跳出循环的三种方法 (break, return, continue) JS跳出循环的三种方法(break, return, continue) ","date":"2021-09-19","objectID":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/:0:0","tags":[null],"title":"JS跳出循环的三种方法","uri":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":[null],"content":"前言: 一位前端界的大神让我去思考的一个问题, 给了Big-man一段代码，如下: function Seriously(options) { // if called without 'new', make a new object and return that if(window === this || !(this instanceof Seriously) || this.id !== undefined) { return new Seriously(options); } } return语句执行之后还会继续执行吗？这是大神上来让我解决的问题，既然提到了return那我也就随带解决JS中另外的两种结束循环的方法break, continue。 ","date":"2021-09-19","objectID":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/:1:0","tags":[null],"title":"JS跳出循环的三种方法","uri":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":[null],"content":"Break语句: break语句会使运行的程序立刻退出包含在最内层的循环或者退出一个switch语句。由于它是用来退出循环或者switch语句的, 所以只有当它出现在这些语句的时候, 这种形式的break语句才是合法的。如果一个循环的终止条件非常复杂, 那么使用break语句来实现某些条件比用一个循环表达式所有的条件容易得多。 for(var i = 519; i \u003c 550; i++) { if(i == 522) { break; } console.log(i); alert(i); document.write(i); } 当i = 521的时候，直接退出for这个循环。这个循环将不再被执行。对于输出结果的话，可以自己去测试的吧。 ","date":"2021-09-19","objectID":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/:2:0","tags":[null],"title":"JS跳出循环的三种方法","uri":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":[null],"content":"Continue语句: continue语句和break语句相似。所不同的是，它不是退出一个循环，而是开始循环的一次新迭代。continue语句只能用在while语句、do/while语句、for语句、或者for/in语句的循环体内, 在其他地方使用都会引起错误? for(var i = 5; i \u003e=0; i--) { if(i == 4 || i == 3 || i == 1) { continue; } console.log(i); alert(i); document.write(i); } 当i = 4、i = 3以及i = 1的时候，直接跳出for循环。下次继续执行。至于输出结果，还希望大家去打印一下。 ","date":"2021-09-19","objectID":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/:3:0","tags":[null],"title":"JS跳出循环的三种方法","uri":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":[null],"content":"Return语句: return语句就是用于指定函数返回的值。return语句只能出现在函数体内，出现在代码中的其他任何地方造成语法错误！ for(var i = 1; i \u003c 10; i++) { if(i == 8) { return; } console.log(i); alert(i); document.write(i); } 执行结果Uncaught SyntaxError: illegal return statement(...) 错误意思是非法捕获的查询返回语句。当执行return语句时, 即使函数主题中还有其他语句, 函数执行也会停止! \u003cscript type=\"text/javascript\"\u003e if(username == \"\") { alert(\"please input your username: \"); return false; } else if (qq == \"\") { alert(\"please input your qq number: \"); return false; } \u003c/script\u003e 上面的实例里，当username为空时，就不会再向下执行，在一些表单提交中，也可以通过return false来阻止默认的提交方式，改用Ajax的提交方式，例如： \u003cform id=\"form\" onSubmit=\"return false\"\u003e ... \u003c/form\u003e ","date":"2021-09-19","objectID":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/:4:0","tags":[null],"title":"JS跳出循环的三种方法","uri":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":[null],"content":"this对应的全局变量: window == this这个Boolean等式，在不同的情况下的展现都不一样的。 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003e\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript type=“text/javascript”\u003e function a() { console.log(window === this) } a(); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 这个时候的window === this打印出来的是true，这也就意味着this绝对等于window。 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003e\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cscript type=“text/javascript”\u003e ‘use strict’ function a() { console.log(window === this) } a(); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 这个时候window === this返回回来的值却是false， 而且打印出来的this是undefined的。所以严格模式下面的代码操作需要更加的规范和合理才可以的。 Jackdan9 Thinking https://blog.csdn.net/XXJ19950917/article/details/78310346","date":"2021-09-19","objectID":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/:5:0","tags":[null],"title":"JS跳出循环的三种方法","uri":"/posts/js%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95/"},{"categories":["默认分类"],"content":" timeout=prompt(\"Set timeout (Second):\"); count=0 current=location.href; if(timeout\u003e0) setTimeout('reload()',1000*timeout); else location.replace(current); function reload(){ setTimeout('reload()',1000*timeout); count++; console.log('每（'+timeout+'）秒自动刷新,刷新次数：'+count); fr4me='\u003cframeset cols=\\'*\\'\u003e\\n\u003cframe src=\\''+current+'\\'/\u003e'; fr4me+='\u003c/frameset\u003e'; with(document){write(fr4me);void(close())}; } https://blog.csdn.net/samt007/article/details/80014071 ","date":"2021-08-23","objectID":"/posts/18/:0:0","tags":[],"title":"chrome浏览器网页刷新的console代码","uri":"/posts/18/"},{"categories":["默认分类"],"content":"read-host 类似cmd的pause ","date":"2021-08-21","objectID":"/posts/17/:0:0","tags":[],"title":"powershell窗口不自动关闭","uri":"/posts/17/"},{"categories":["默认分类"],"content":" https://www.cnblogs.com/meetrice/p/5238114.html ","date":"2021-08-19","objectID":"/posts/16/:0:0","tags":[],"title":"千万别设置弱密码！！！","uri":"/posts/16/"},{"categories":["默认分类"],"content":"You need a shebang line if the executable file cannot be run natively by the kernel. The kernel can only run machine code in a specific format (ELF on most Unix variants), or sometimes other formats (e.g. on Linux you can register executable formats through binfmt_misc). If the executable file needs an interpreter then the kernel needs to know which interpreter to call. That’s what the shebang line is for. If your script is in fish syntax, its first line must be #!/usr/bin/env fish (You can use the absolute path instead, but then you’ll have to modify the script if you want to run it on a machine where the fish executable is in a different location, e.g. /usr/bin/fish vs /usr/local/bin/fish.) If your script is in sh syntax, use #!/bin/sh (All modern Unix systems have a POSIX sh at /bin/sh so you don’t need env.) If your script is in bash syntax (which is sh plus some bash-specific extensions), use #!/usr/bin/env bash On Linux, in practice, #!/bin/bash will also work. All of this is independent of which shell you’re calling the script from. All that matters is what language the script is written in. https://unix.stackexchange.com/questions/491419/fish-shell-exec-format-error ","date":"2021-07-24","objectID":"/posts/13/:0:0","tags":[],"title":"青龙运行shell Exec format error","uri":"/posts/13/"},{"categories":["默认分类"],"content":"找不到原因，初步怀疑是nginx的问题，复制一点解决方法来等下次出错 情况一：由于nginx默认的fastcgi进程响应缓冲区太小造成 这种情况下导致fastcgi进程被挂起，如果fastcgi服务队这个挂起处理不是很好的话，就可能提示“504 Gateway Time-out”错误。 情况一解决办法： 默认的fastcgi进程响应的缓冲区是8K，我们可以设置大一点，在nginx.conf里，加入：fastcgi_buffers 8 128k 这表示设置fastcgi缓冲区为8块128k大小的空间。 情况一解决办法（改进）： 在上述方法修改后，如果还是出现问题，我们可以继续修改nginx的超时参数，将参数调大一点，如设置为60秒： send_timeout 60; 经过这两个参数的调整，结果没有再提示“504 Gateway Time-out”错误，说明效果还是挺不错的，问题基本解决。 情况二：PHP环境的配置问题 这里我们需要对php-fpm和nginx进行配置修改。因为这种情况下，也会出现“504 Gateway Time-out”错误提示。 情况二解决办法（ php-fpm配置修改）： 将max_children由之前的10改为30，这样操作是为了保证有充足的php-cgi进程可以被使用。 将request_terminate_timeout由之前的0秒改成60秒，这样使php-cgi进程处理脚本的超时时间提高到60秒，可以防止进程被挂起以提高利用效率。 情况二解决办法（nginx配置修改）： 为了减少fastcgi的请求次数，尽量维持buffers不变，我们要更改nginx的几个配置项，如下： 将fastcgi_buffers由4 64k改为2 256k; 将fastcgi_buffer_size 由64k改为128k; 将fastcgi_busy_buffers_size由128k改为256k; 将fastcgi_temp_file_write_size由128k改成256k。 情况二解决办法修改完，我们需要重新加载php-fpm和nginx的配置，然后再进行测试。之后就没有发现“504 Gateway Time-out”错误，效果也还是不错的！ ","date":"2021-06-29","objectID":"/posts/12/:0:0","tags":[],"title":"面板504错误","uri":"/posts/12/"},{"categories":["默认分类"],"content":"第一步解析A记录 第二步 在 Nginx 中完成反向代理配置 编辑 Nginx 配置文件，在 nginx.conf 文件中新增server节点如下（通过vi /etc/nginx/nginx.conf修改） server { listen 80; server_name www.abc.com; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass https://127.0.0.1:443; } } server { listen 80; server_name ocr.abc.com; location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:8888; } } 第三步 验证二级域名 切记，验证之前先要使用nginx -s reload刷新 Nginx 配置。 https://heartsuit.github.io/2019/04/30/Nginx-Reverse-Proxy-Server.html ","date":"2021-06-07","objectID":"/posts/11/:0:0","tags":[],"title":"Nginx反代二级域名","uri":"/posts/11/"},{"categories":["默认分类"],"content":"js中参数设置1： this._options = { // 色带HSL饱和度 colorSaturation: \"80%\", // 色带HSL亮度量 colorBrightness: \"60%\", // 带状颜色不透明度 colorAlpha: 0.65, // 在HSL颜色空间中循环显示颜色的速度有多快 colorCycleSpeed: 6, // 从哪一侧开始Y轴 (top|min, middle|center, bottom|max, random) verticalPosition: \"center\", // 到达屏幕另一侧的速度有多快 horizontalSpeed: 200, // 在任何给定时间，屏幕上会保留多少条带 ribbonCount: 3, // 添加笔划以及色带填充颜色 strokeSize: 0, // 通过页面滚动上的因子垂直移动色带 parallaxAmount: -0.5, // 随着时间的推移，为每个功能区添加动画效果 animateSections: true }; 参数设置2 this._canvas = document.createElement(\"canvas\"); this._canvas.style[\"display\"] = \"block\"; this._canvas.style[\"position\"] = \"fixed\"; this._canvas.style[\"margin\"] = \"0\"; this._canvas.style[\"padding\"] = \"0\"; this._canvas.style[\"border\"] = \"0\"; this._canvas.style[\"outline\"] = \"0\"; this._canvas.style[\"left\"] = \"0\"; this._canvas.style[\"top\"] = \"0\"; this._canvas.style[\"width\"] = \"100%\"; this._canvas.style[\"height\"] = \"100%\"; this._canvas.style[\"z-index\"] = \"-1\"; this._canvas.id = \"bgCanvas\"; this._canvas.style[\"background-color\"]=\"#1f1f1f\"; this._onResize(); 相关工具 JS美化 https://www.html.cn/tool/js_beautify/ JS在线运行 http://js.jsrun.net/new 参考 https://github.com/hustcc/ribbon.js https://www.jq22.com/jquery-info21392 ","date":"2021-05-24","objectID":"/posts/8/:0:0","tags":[],"title":"配置动态背景记录","uri":"/posts/8/"},{"categories":["默认分类"],"content":"如下是详细错误内容，我猜你的跟我的应该一毛一样： $ docker-compose up ERROR: Couldn’t connect to Docker daemon at http+docker://localunixsocket - is it running? If it’s at a non-standard location, specify the URL with the DOCKER_HOST environment variable. 导致这个问题的原因实在多，所以把解决方法一一列出。 docker服务没启动，那就启动 $ sudo systemctl start docker // 或者 sudo service docker start $ docker-compose up docker服务启动了，但是一些缓存影响了，那就重启 $ sudo systemctl restart docker // 或者 sudo service docker restart $ docker-compose up 当前用户不在docker用户组 那就把自己加到docker用户组 $ sudo gpasswd -a ${USER} docker $ docker-compose up 添加到docker用户组后要重新登录shell再up。 也许用sudo可能有效 $ sudo docker-compose up docker-compose版本太老了 那就更新版本 $ sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose $ sudo chmod +x /usr/local/bin/docker-compose $ docker-compose up 重启系统吧 $ sudo reboot $ docker-compose up https://www.awaimai.com/2587.html 列出所有容器ID docker ps -aq 查看所有运行或者不运行容器 docker ps -a 停止所有的container（容器），这样才能够删除其中的images： docker stop $(docker ps -a -q) 或者 docker stop $(docker ps -aq) 如果想要删除所有container（容器）的话再加一个指令： docker rm $(docker ps -a -q) 或者 docker rm $(docker ps -aq) 查看当前有些什么images docker images 删除images（镜像），通过image的id来指定删除谁 docker rmi \u003cimage id\u003e 想要删除untagged images，也就是那些id为的image的话可以用 docker rmi $(docker images | grep \"^\u003cnone\u003e\" | awk \"{print $3}\") 要删除全部image（镜像）的话 docker rmi $(docker images -q) 强制删除全部image的话 docker rmi -f $(docker images -q) 从容器到宿主机复制 docker cp tomcat：/webapps/js/text.js /home/admin docker cp 容器名: 容器路径 宿主机路径 从宿主机到容器复制 docker cp /home/admin/text.js tomcat：/webapps/js docker cp 宿主路径中文件 容器名 容器路径 删除所有停止的容器 docker container prune 删除所有不使用的镜像 docker image prune --force --all或者docker image prune -f -a 停止、启动、杀死、重启一个容器 docker stop Name或者ID docker start Name或者ID docker kill Name或者ID docker restart name或者ID docker进入容器，查看配置文件 docker exec ：在运行的容器中执行命令 -d :分离模式: 在后台运行 -i :即使没有附加也保持STDIN（标准输入） 打开,以交互模式运行容器，通常与 -t 同时使用； -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用； docker exec -it f94d2c317477 /bin/bash 出现root@f94d2c317477:/usr/share/elasticsearch/config# vi elasticsearch.yml bash: vi: command not found apt-get update \u0026\u0026 apt-get install vim -y 修改配置、退出容器 1、如果要正常退出不关闭容器，请按Ctrl+P+Q进行退出容器 2、如果使用exit退出，那么在退出之后会关闭容器，可以使用下面的流程进行恢复 使用docker restart命令重启容器 使用docker attach命令进入容器 docker启动命令,docker重启命令,docker关闭命令 启动 systemctl start docker 守护进程重启 sudo systemctl daemon-reload 重启docker服务 systemctl restart docker 重启docker服务 sudo service docker restart 关闭docker service docker stop 关闭docker systemctl stop docker ","date":"2021-05-23","objectID":"/posts/4/:0:0","tags":["docker"],"title":"docker相关","uri":"/posts/4/"}]